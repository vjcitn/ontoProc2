[{"path":"https://github.com/vjcitn/ontoProc2/articles/GeneOnto.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Using ontoProc2 with Gene Ontology","text":"Bioconductor’s main interface Gene Ontology GO.db package, leverages AnnotationDbi. bespoke facilities. vignette consider additional details can accessed working semantic SQL. statements table fundamental. single GO id, statements available :","code":"library(ontoProc2) library(DT) library(GO.db) library(dplyr) gg = retrieve_semsql_conn(\"go\") chk1 = tbl(gg, \"statements\") |> head() |> as.data.frame() datatable(chk1) lk1 = tbl(gg, \"statements\") |> filter(subject == \"GO:0018942\") |> as.data.frame() datatable(lk1)"},{"path":"https://github.com/vjcitn/ontoProc2/articles/GeneOnto.html","id":"basic-comparison-of-semantic-sql-resource-to-go-db","dir":"Articles","previous_headings":"","what":"Basic comparison of semantic SQL resource to GO.db","title":"Using ontoProc2 with Gene Ontology","text":"begin filtering semantic SQL representation GO remove explicitly deprecated terms. Now isolate IDs presented GO.db non-deprecated IDs semantic SQL. ’s one example: ’s example term semantic SQL GO.db:","code":"godep = tbl(gg, \"statements\") |> filter(str_like(subject, \"GO:%\"), (predicate == \"owl:deprecated\")) |>      select(subject) |> distinct() |> pull()  semgo = tbl(gg, \"statements\") |> filter(str_like(subject, \"GO:%\")) |> select(subject) |>     distinct() |> pull() gok = setdiff(semgo, godep)  # non-deprecated ids in semantic SQL inbioconly = setdiff(keys(GO.db), gok) ibco = AnnotationDbi::select(GO.db, keys=inbioconly, columns=c(\"GOID\", \"TERM\")) ## 'select()' returned 1:1 mapping between keys and columns dim(ibco) ## [1] 587   2 datatable(head(ibco)) tmp = ibco[1,\"GOID\"] tbl(gg, \"statements\") |> select(subject, predicate, object, value) |>     filter(subject == tmp) |> as.data.frame() |> datatable() insemonly = setdiff(gok, keys(GO.db)) tmp = insemonly[1] tbl(gg, \"statements\") |> select(subject, predicate, object, value) |>     filter(subject == tmp) |> as.data.frame() |> datatable()"},{"path":"https://github.com/vjcitn/ontoProc2/articles/ontoProc2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"ontoProc2 -- leveraging semantic SQL and owlready2 for ontology analysis in Bioconductor","text":"ontoProc2 package three aims: give convenient access ontologies transformed “semantic SQL” INCAtools project; provide interface OWL processing via python owlready2; simplify operations available ontoProc.","code":""},{"path":"https://github.com/vjcitn/ontoProc2/articles/ontoProc2.html","id":"acquiring-ontologies","dir":"Articles","previous_headings":"","what":"Acquiring ontologies","title":"ontoProc2 -- leveraging semantic SQL and owlready2 for ontology analysis in Bioconductor","text":"retrieve_semsql_conn produces connection SQLite table representing ontology. arguments ontology, short string matches “ID” OBO collection cache, cache object inheriting main class defined BiocFileCache package function retrieve SQLite database produced semsql project, store specified cache, returns DBI connection based RSQLite. example Cell Ontology use Relevant metadata (worked retrieval process): investigate ontology, natural use dplyr stringr.","code":"library(ontoProc2) cellont = retrieve_semsql_conn(\"^cl\") # will grep on rname in bfcinfo cellont ## <SQLiteConnection> ##   Path: /Users/vincentcarey/Library/Caches/org.R-project.R/R/BiocFileCache/877642358771_cl.db ##   Extensions: TRUE library(dplyr) tbl(cellont, \"statements\") |> filter(predicate == \"owl:versionInfo\") |>    select(value) |> pull() ## [1] \"2025-10-16\" tbl(cellont, \"statements\") |> filter(subject== \"obo:cl.owl\", predicate==\"rdfs:comment\") |>    select(value) |> pull() |> strsplit(\"Contact\") ## [[1]] ## [1] \"See PMID:15693950, PMID:12799354, PMID:20123131, PMID:21208450; \" ## [2] \" Alexander Diehl, addiehl[at]buffalo.edu, university at buffalo.\" library(stringr) library(DBI) head(dbListTables(cellont)) ## [1] \"all_problems\"                    \"annotation_property_node\"        ## [3] \"anonymous_class_expression\"      \"anonymous_expression\"            ## [5] \"anonymous_individual_expression\" \"anonymous_property_expression\" celldf = tbl(cellont, \"statements\") |>     select(subject, predicate, object, value) |>     filter(predicate == \"rdfs:label\", str_like(subject, \"CL:%\")) |> as.data.frame()  library(DT) datatable(celldf)"},{"path":"https://github.com/vjcitn/ontoProc2/articles/ontoProc2.html","id":"transformation-to-ontology_index-instances","dir":"Articles","previous_headings":"","what":"Transformation to ontology_index instances","title":"ontoProc2 -- leveraging semantic SQL and owlready2 for ontology analysis in Bioconductor","text":"ontologyX suite Daniel Greene colleagues provides convenient ontology handling functions. can transform SQLite data format: convenience function assists visualizations:","code":"cloi = semsql_to_oi(cellont) ## Warning in ontologyIndex::ontology_index(name = nn, parents = pl): Some parent ## terms not found: BFO:0000002, SO:0000704, BFO:0000003 (16 more) cloi ## Ontology with 18335 terms ##  ## Properties: ##  id: character ##  name: list ##  parents: list ##  children: list ##  ancestors: list ##  obsolete: logical ## Roots: ##  UBERON:0000105 - life cycle stage ##  GO:0008150 - biological_process ##  GO:0003674 - molecular_function ##  UBERON:0000465 - material anatomical entity ##  UBERON:0000466 - immaterial anatomical entity ##  GO:0005575 - cellular_component ##  PATO:0000001 - quality ##  PR:000010543 - myeloperoxidase ##  IAO:0000027 - data item ##  NCBITaxon:131567 - cellular organisms ##  ... 771 more onto_plot2(cloi, c(\"CL:0000624\", \"CL:0000492\", \"CL:0000793\", \"CL:0000803\"))"},{"path":"https://github.com/vjcitn/ontoProc2/articles/uberonpeek.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"uberonpeek -- a look at UBERON ontology, etc., with ontoProc2","text":"ontoProc2 package designed give convenient access ontologies transformed “semantic SQL” INCAtools project. ’ll start retrieving current UBERON ontology examining tables “statements”.","code":"library(ontoProc2) library(DBI) library(dplyr) ubcon = retrieve_semsql_conn(\"uberon\") head(dbListTables(ubcon)) ## [1] \"all_problems\"                    \"annotation_property_node\"        ## [3] \"anonymous_class_expression\"      \"anonymous_expression\"            ## [5] \"anonymous_individual_expression\" \"anonymous_property_expression\" tbl(ubcon, \"statements\") ## # Source:   table<`statements`> [?? x 8] ## # Database: sqlite 3.50.4 [/Users/vincentcarey/Library/Caches/org.R-project.R/R/BiocFileCache/72c753e234b0_uberon.db] ##    stanza         subject        predicate  object value datatype language graph ##    <chr>          <chr>          <chr>      <chr>  <chr> <chr>    <chr>    <chr> ##  1 obo:uberon.owl obo:uberon.owl foaf:home… NA     http… xsd:any… NA       NA    ##  2 obo:uberon.owl obo:uberon.owl rdfs:comm… NA     Aure… NA       NA       NA    ##  3 obo:uberon.owl obo:uberon.owl oio:treat… NA     ZFS … NA       NA       NA    ##  4 obo:uberon.owl obo:uberon.owl oio:treat… NA     ZFA … NA       NA       NA    ##  5 obo:uberon.owl obo:uberon.owl oio:treat… NA     XAO … NA       NA       NA    ##  6 obo:uberon.owl obo:uberon.owl oio:treat… NA     WBls… NA       NA       NA    ##  7 obo:uberon.owl obo:uberon.owl oio:treat… NA     WBbt… NA       NA       NA    ##  8 obo:uberon.owl obo:uberon.owl oio:treat… NA     TGMA… NA       NA       NA    ##  9 obo:uberon.owl obo:uberon.owl oio:treat… NA     TAO … NA       NA       NA    ## 10 obo:uberon.owl obo:uberon.owl oio:treat… NA     TADS… NA       NA       NA    ## # ℹ more rows"},{"path":"https://github.com/vjcitn/ontoProc2/articles/uberonpeek.html","id":"parent-child-relations","dir":"Articles","previous_headings":"","what":"Parent-child relations","title":"uberonpeek -- a look at UBERON ontology, etc., with ontoProc2","text":"CRAN’s ontologyIndex package provides familiar representation simplifies visualization. sense variety ontological cross-references present can given tabling tag prefixes. using ancestors component can obtain view -relations (presumably developed rdfs:subClassOf predicates). ’ve chosen terminal tags tags heart, kidney, cortex kidney.","code":"uboi = semsql_to_oi(ubcon) ## Warning in ontologyIndex::ontology_index(name = nn, parents = pl): Some parent ## terms not found: BFO:0000001, CARO:0000000, CHEBI:24431 (5 more) uboi ## Ontology with 25474 terms ##  ## Properties: ##  id: character ##  name: list ##  parents: list ##  children: list ##  ancestors: list ##  obsolete: logical ## Roots: ##  CHEBI:24432 - biological role ##  CHEBI:51086 - chemical role ##  CHEBI:33232 - application ##  CHEBI:23367 - molecular entity ##  CHEBI:24433 - group ##  BFO:0000002 - continuant ##  CHEBI:33250 - atom ##  BFO:0000003 - occurrent ##  CARO:0000007 - immaterial anatomical entity ##  CHEBI:36340 - fermion ##  ... 9 more uboi$name[10364:10370] ## $`PATO:0001294` ## [1] \"radiation reflective quality\" ##  ## $`PATO:0001297` ## [1] \"reflectivity\" ##  ## $`PATO:0001300` ## [1] \"optical quality\" ##  ## $`PATO:0001359` ## [1] \"rugose\" ##  ## $`PATO:0001365` ## [1] \"spiny\" ##  ## $`PATO:0001374` ## [1] \"ploidy\" ##  ## $`PATO:0001375` ## [1] \"haploid\" prefs = gsub(\":.*\", \"\", names(uboi$name)) table(prefs) ## prefs ##       BFO      BSPO      CARO     CHEBI        CL        GO       IAO       NBO  ##        14        12         5       908      1466      7398         5        37  ## NCBITaxon      PATO        PR        RO    UBERON  ##       473       158       329         1     14668 onto_plot2(uboi,    unlist(uboi$ancestors[c(\"UBERON:0002189\",       \"UBERON:0002113\", \"UBERON:0000948\")]))"},{"path":"https://github.com/vjcitn/ontoProc2/articles/uberonpeek.html","id":"efo-and-nci-thesaurus","dir":"Articles","previous_headings":"","what":"EFO and NCI thesaurus","title":"uberonpeek -- a look at UBERON ontology, etc., with ontoProc2","text":"cursory inspection, EFO ontology considerable information anatomic locations diseases. ’ll use entailed edges table EFO find statements ‘heart’ (UBERON:0000948) object. tedious see formal tags. assembled simple character vector map covers many tags. predicates heart table ? enumerate decode terms disease location (EFO:0000784) heart, ","code":"eforef = retrieve_semsql_conn(\"efo\") nciref = retrieve_semsql_conn(\"ncit\") htab = tbl(eforef, \"entailed_edge\") |>    filter(object == \"UBERON:0000948\") |> as.data.frame()  head(htab) ##          subject       predicate         object ## 1 UBERON:0000948 rdfs:subClassOf UBERON:0000948 ## 2    EFO:0009285     IAO:0000136 UBERON:0000948 ## 3    EFO:0600032     IAO:0000136 UBERON:0000948 ## 4    EFO:0008398     IAO:0000136 UBERON:0000948 ## 5    EFO:0009291     IAO:0000136 UBERON:0000948 ## 6    EFO:0009290     IAO:0000136 UBERON:0000948 data(ncit_map) head(ncit_map) ##           IAO:0000112           IAO:0000114           IAO:0000115  ##    \"example of usage\" \"has curation status\"          \"definition\"  ##           IAO:0000116           IAO:0000117           IAO:0000232  ##         \"editor note\"         \"term editor\"        \"curator note\" ncit_map[unique(htab$predicate)] ##                            <NA>                     IAO:0000136  ##                              NA                      \"is_about\"  ##                      RO:0002131                      RO:0002502  ##                      \"overlaps\"                    \"depends on\"  ##                            <NA>                     BFO:0000066  ##                              NA                     \"occurs in\"  ##                      RO:0001025                     BFO:0000050  ##                    \"located_in\"                       \"part_of\"  ##                      RO:0002314                     EFO:0000784  ##            \"inheres in part of\"          \"has_disease_location\"  ##                      RO:0000052                      RO:0004027  ##                    \"inheres_in\" \"disease has inflammation site\" library(DT) hdis = ncit_map[ unlist(htab |> filter(predicate == \"EFO:0000784\")     |> select(subject)) ] datatable(data.frame(tag=names(hdis), value=as.character(hdis)))"},{"path":"https://github.com/vjcitn/ontoProc2/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincent Carey. Author, maintainer.","code":""},{"path":"https://github.com/vjcitn/ontoProc2/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Carey V (2025). ontoProc2: ontology facilities based INCAtools Semantic SQL. R package version 0.0.5, https://github.com/vjcitn/ontoProc2.","code":"@Manual{,   title = {ontoProc2: ontology facilities based on INCAtools Semantic SQL},   author = {Vincent Carey},   year = {2025},   note = {R package version 0.0.5},   url = {https://github.com/vjcitn/ontoProc2}, }"},{"path":"https://github.com/vjcitn/ontoProc2/index.html","id":"ontoproc2","dir":"","previous_headings":"","what":"ontology facilities based on INCAtools Semantic SQL","title":"ontology facilities based on INCAtools Semantic SQL","text":"Revise ontoProc methods take advantage INCAtools SemanticSQL representations ontologies INCAtools Semantic SQL project (tutorial notebook) identifies AWS S3 bucket large number ontologies available. package provide tools retrieve, cache, make use ontologies.","code":"%vjc> aws s3 ls s3://bbop-sqlite/ |grep db.gz 2023-09-02 17:38:48    4268563 ado.db.gz 2023-09-02 17:38:48   11841154 agro.db.gz 2023-09-02 17:38:48     301889 aio.db.gz 2023-09-02 17:38:48   42842146 aism.db.gz 2023-09-02 17:38:48     294887 amphx.db.gz 2023-09-02 17:38:48     303328 apo.db.gz 2023-09-02 17:38:48    3457483 apollo_sv.db.gz 2023-09-02 17:38:48    7245916 aro.db.gz 2023-09-02 17:38:48    5939737 bao.db.gz 2023-09-02 17:38:48     767913 bcio.db.gz 2023-09-02 17:38:50     552497 bco.db.gz 2023-09-02 17:38:51 1600927276 bero.db.gz 2023-09-02 17:38:51     108284 bfo.db.gz 2023-09-02 17:38:54     575935 biolink.db.gz 2023-09-02 17:38:55        646 biopax.db.gz 2023-09-02 17:38:55     463088 biovoices.db.gz ..."},{"path":"https://github.com/vjcitn/ontoProc2/reference/improveNodes.html","id":null,"dir":"Reference","previous_headings":"","what":"inject linefeeds for node names for graph, with textual annotation from ontology — improveNodes","title":"inject linefeeds for node names for graph, with textual annotation from ontology — improveNodes","text":"inject linefeeds node names graph, textual annotation ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/improveNodes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"inject linefeeds for node names for graph, with textual annotation from ontology — improveNodes","text":"","code":"improveNodes(g, ont)"},{"path":"https://github.com/vjcitn/ontoProc2/reference/improveNodes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"inject linefeeds for node names for graph, with textual annotation from ontology — improveNodes","text":"g graphNEL instance ont instance ontology ontologyIndex","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/make_graphNEL_from_ontology_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"obtain graphNEL ontology_plot instance ontologyPlot","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/make_graphNEL_from_ontology_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"","code":"make_graphNEL_from_ontology_plot(x)"},{"path":"https://github.com/vjcitn/ontoProc2/reference/make_graphNEL_from_ontology_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"x instance S3 class ontology_plot","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/make_graphNEL_from_ontology_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"instance S4 graphNEL class","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/make_graphNEL_from_ontology_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"obtain graphNEL from ontology_plot instance of ontologyPlot — make_graphNEL_from_ontology_plot","text":"","code":"if (FALSE) { # \\dontrun{ requireNamespace(\"Rgraphviz\") requireNamespace(\"graph\") clcon = retrieve_semsql_conn(\"cl\") cl = semsql_to_oi(clcon) cl3k = c(\"CL:0000492\", \"CL:0001054\", \"CL:0000236\", \"CL:0000625\",    \"CL:0000576\", \"CL:0000623\", \"CL:0000451\", \"CL:0000556\") p3k = ontologyPlot::onto_plot(cl, cl3k) gnel = make_graphNEL_from_ontology_plot(p3k) gnel = improveNodes(gnel, cl) graph::graph.par(list(nodes=list(shape=\"plaintext\", cex=.8))) gnel = Rgraphviz::layoutGraph(gnel) Rgraphviz::renderGraph(gnel) } # }"},{"path":"https://github.com/vjcitn/ontoProc2/reference/ncit_map.html","id":null,"dir":"Reference","previous_headings":"","what":"a named vector with values rdfs labels in NCI thesaurus, and names the corresponding formal ontology tags — ncit_map","title":"a named vector with values rdfs labels in NCI thesaurus, and names the corresponding formal ontology tags — ncit_map","text":"named vector values rdfs labels NCI thesaurus, names corresponding formal ontology tags","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/ncit_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a named vector with values rdfs labels in NCI thesaurus, and names the corresponding formal ontology tags — ncit_map","text":"","code":"ncit_map"},{"path":"https://github.com/vjcitn/ontoProc2/reference/ncit_map.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"a named vector with values rdfs labels in NCI thesaurus, and names the corresponding formal ontology tags — ncit_map","text":"named character vector","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/ncit_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"a named vector with values rdfs labels in NCI thesaurus, and names the corresponding formal ontology tags — ncit_map","text":"","code":"data(\"nci_map\", package=\"ontoProc2\") #> Warning: data set 'nci_map' not found ncit_map[\"EFO:1000899\"] #> Error: object 'ncit_map' not found"},{"path":"https://github.com/vjcitn/ontoProc2/reference/onto_plot2.html","id":null,"dir":"Reference","previous_headings":"","what":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"high-level use graph/Rgraphviz rendering ontology relations","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/onto_plot2.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"","code":"onto_plot2(ont, terms2use, cex = 0.8, ...)"},{"path":"https://github.com/vjcitn/ontoProc2/reference/onto_plot2.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"ont instance ontology ontologyIndex terms2use character vector cex numeric(1) defaults .8, supplied Rgraphviz::graph.par ... passed onto_plot ontologyPlot","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/onto_plot2.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"graphNEL instance (invisibly)","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/onto_plot2.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"high-level use of graph/Rgraphviz for rendering ontology relations — onto_plot2","text":"","code":"clcon = retrieve_semsql_conn(\"cl\") #> multiple cache entries with cl_bbop_ontoproc2, using last cl = semsql_to_oi(clcon) #> Warning: Some parent terms not found: BFO:0000001, CHEBI:50906, CHEBI:36342 (9 more) cl3k = c(\"CL:0000492\", \"CL:0001054\", \"CL:0000236\", \"CL:0000625\",    \"CL:0000576\", \"CL:0000623\", \"CL:0000451\", \"CL:0000556\") onto_plot2(cl, cl3k)"},{"path":"https://github.com/vjcitn/ontoProc2/reference/retrieve_semsql_conn.html","id":null,"dir":"Reference","previous_headings":"","what":"return a SQLite connection (read only) to an INCAtools Semantic SQL ontology — retrieve_semsql_conn","title":"return a SQLite connection (read only) to an INCAtools Semantic SQL ontology — retrieve_semsql_conn","text":"return SQLite connection (read ) INCAtools Semantic SQL ontology","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/retrieve_semsql_conn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"return a SQLite connection (read only) to an INCAtools Semantic SQL ontology — retrieve_semsql_conn","text":"","code":"retrieve_semsql_conn(ontology = \"efo\", cache = BiocFileCache::BiocFileCache())"},{"path":"https://github.com/vjcitn/ontoProc2/reference/retrieve_semsql_conn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"return a SQLite connection (read only) to an INCAtools Semantic SQL ontology — retrieve_semsql_conn","text":"ontology character(1) short string prefixing .db.gz INCAtools collection cache BiocFileCache instance, defaulting BiocFileCache::BiocFileCache()","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/retrieve_semsql_conn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"return a SQLite connection (read only) to an INCAtools Semantic SQL ontology — retrieve_semsql_conn","text":"","code":"# first time will involve a download and decompression aionto = retrieve_semsql_conn(\"aio\") head(DBI::dbListTables(aionto)) #> [1] \"all_problems\"                    \"annotation_property_node\"        #> [3] \"anonymous_class_expression\"      \"anonymous_expression\"            #> [5] \"anonymous_individual_expression\" \"anonymous_property_expression\"   dplyr::tbl(aionto, \"class_node\") |> head() |> collect() #> Error in collect(head(dplyr::tbl(aionto, \"class_node\"))): could not find function \"collect\""},{"path":"https://github.com/vjcitn/ontoProc2/reference/semsql_to_oi.html","id":null,"dir":"Reference","previous_headings":"","what":"produce an ontology_index instance from semantic sql sqlite connection — semsql_to_oi","title":"produce an ontology_index instance from semantic sql sqlite connection — semsql_to_oi","text":"produce ontology_index instance semantic sql sqlite connection","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/semsql_to_oi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"produce an ontology_index instance from semantic sql sqlite connection — semsql_to_oi","text":"","code":"semsql_to_oi(con)"},{"path":"https://github.com/vjcitn/ontoProc2/reference/semsql_to_oi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"produce an ontology_index instance from semantic sql sqlite connection — semsql_to_oi","text":"con DBI::dbConnect value sqlite table","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/semsql_to_oi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"produce an ontology_index instance from semantic sql sqlite connection — semsql_to_oi","text":"result ontologyIndex::ontology_index evaluated labels parent-child relations tables statements edge semantic sql resource","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/semsql_url.html","id":null,"dir":"Reference","previous_headings":"","what":"produce INCAtools distribution URL — semsql_url","title":"produce INCAtools distribution URL — semsql_url","text":"produce INCAtools distribution URL","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/semsql_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"produce INCAtools distribution URL — semsql_url","text":"","code":"semsql_url(ontology = \"efo\")"},{"path":"https://github.com/vjcitn/ontoProc2/reference/semsql_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"produce INCAtools distribution URL — semsql_url","text":"ontology short string prefix .db.gz bbop-sqlite collection","code":""},{"path":"https://github.com/vjcitn/ontoProc2/reference/semsql_url.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"produce INCAtools distribution URL — semsql_url","text":"","code":"semsql_url(\"cl\") #> [1] \"https://s3.amazonaws.com/bbop-sqlite/cl.db.gz\""}]
